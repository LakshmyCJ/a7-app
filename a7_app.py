# -*- coding: utf-8 -*-
"""A7 app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E80bcXbsGlbT32b9RxK71RYK7n-9gZCK
"""


import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import plotly.express as px
import datetime

st.title("Investment Recommendation App: Plan Your Financial Future")

# User inputs
salary = st.number_input("Enter your monthly salary:", min_value=0, key="salary")
savings_percent = st.slider("What percentage of your salary would you like to save?", 0, 100, 20, key="savings_percent")
st.write("Saving consistently is key to building wealth. This slider helps you determine how much you can allocate towards savings.")
savings_amount = salary * (savings_percent / 100)
investment_amount = salary - savings_amount

st.write(f"Your estimated monthly savings amount: ₹{savings_amount:.2f}")
st.write(f"Amount available for investment after savings: ₹{investment_amount:.2f}")

# List of stock tickers
tickers = ["ADANIENT.NS", "ADANIPORTS.NS", "APOLLOHOSP.NS", "ASIANPAINT.NS", "AXISBANK.NS",
           "BAJAJ-AUTO.NS", "BAJFINANCE.NS", "BAJAJFINSV.NS", "BPCL.NS", "BHARTIARTL.NS",
           "BRITANNIA.NS", "CIPLA.NS", "COALINDIA.NS", "DIVISLAB.NS", "DRREDDY.NS", "EICHERMOT.NS",
           "GRASIM.NS", "HCLTECH.NS", "HDFCBANK.NS", "HDFCLIFE.NS", "HEROMOTOCO.NS", "HINDALCO.NS",
           "HINDUNILVR.NS", "ICICIBANK.NS", "ITC.NS", "INDUSINDBK.NS", "INFY.NS", "JSWSTEEL.NS",
           "KOTAKBANK.NS", "LTIM.NS", "LT.NS", "M&M.NS", "MARUTI.NS", "NTPC.NS", "NESTLEIND.NS",
           "ONGC.NS", "POWERGRID.NS", "RELIANCE.NS", "SBILIFE.NS", "SHRIRAMFIN.NS", "SBIN.NS",
           "SUNPHARMA.NS", "TCS.NS", "TATACONSUM.NS", "TATAMOTORS.NS", "TATASTEEL.NS", "TECHM.NS",
           "TITAN.NS", "ULTRACEMCO.NS", "WIPRO.NS"]

@st.cache(allow_output_mutation=True)
def get_stock_data(ticker):
    today = datetime.date.today()
    end_date = today - datetime.timedelta(days=2)  # Get data up to yesterday
    try:
        data = yf.download(ticker, end=end_date.strftime('%Y-%m-%d'))
        return data
    except Exception as e:
        st.error(f"Error fetching data for {ticker}: {e}")
        return pd.DataFrame()

# Load data for each ticker
stock_data = {ticker: get_stock_data(ticker) for ticker in tickers}

# Calculate daily returns and risk
def calculate_returns(data):
    if data.empty:
        return np.nan, np.nan
    data['Return'] = data['Adj Close'].pct_change()
    avg_return = data['Return'].mean()
    risk = data['Return'].std()
    return avg_return, risk

investment_analysis = {}
for ticker in tickers:
    avg_return, risk = calculate_returns(stock_data.get(ticker, pd.DataFrame()))
    investment_analysis[ticker] = {'Average Return': avg_return, 'Risk': risk}

analysis_df = pd.DataFrame(investment_analysis).T
st.write("Investment Analysis:")
st.write(analysis_df)

# Recommend investment based on risk-adjusted return
def recommend_investment(analysis_df):
    analysis_df = analysis_df.dropna()  # Remove stocks with missing data
    if analysis_df.empty:
        st.warning("No data available for analysis.")
        return analysis_df
    analysis_df['Risk-Adjusted Return'] = analysis_df['Average Return'] / analysis_df['Risk']
    return analysis_df.sort_values(by='Risk-Adjusted Return', ascending=False)

recommendations = recommend_investment(analysis_df)
st.write("Investment Recommendations:")
st.write(recommendations)

if not recommendations.empty:
    top_recommendation = recommendations.index[0]
    st.write(f"Top investment recommendation: {top_recommendation}")

# Interactive Stock Price Chart
st.subheader("Explore Historical Stock Prices")
selected_stock = st.selectbox("Select a stock to view its price trend:", list(stock_data.keys()))
if selected_stock in stock_data:
    fig = px.line(stock_data[selected_stock], x=stock_data[selected_stock].index, y="Adj Close", title=f"{selected_stock} Stock Price")
    st.plotly_chart(fig)
else:
    st.write(f"Data not available for {selected_stock}.")


#!pip freeze > requirements.txt
# Download the requirements.txt file
#from google.colab import files
f#iles.download('requirements.txt')
