# -*- coding: utf-8 -*-
"""a7 app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Zn3CsFRViczeRhnOU-LDMCaEovvuMrE9
"""

pip install streamlit yfinance pypfopt pandas plotly

!pip install --upgrade pip

!pip install PyPortfolioOpt

!pip install streamlit yfinance PyPortfolioOpt pandas plotly
!pip install pyngrok

tickers_df.head()

import streamlit as st
import pandas as pd
import yfinance as yf
from pypfopt import EfficientFrontier, risk_models, expected_returns
import plotly.graph_objs as go

# Load tickers from Kaggle CSV
tickers_df = pd.read_csv('/content/ind_nifty500list.csv')
# App title
st.title("Investment Recommendation App: Plan Your Financial Future")

# User Inputs
st.header("User Inputs")
salary = st.number_input("Enter your monthly salary:", min_value=0)
savings_percentage = st.slider("Select savings percentage:", min_value=0, max_value=100, value=20)
investment_amount = salary * (1 - savings_percentage / 100)
st.write(f"Available for investment: â‚¹{investment_amount:.2f}")

# Stock Selection
st.header("Stock Selection")
selected_tickers = st.multiselect("Select up to 10 companies from the Nifty 500 list:", tickers_df['Symbol'].tolist(), max_selections=10)

if selected_tickers:
    # Data Retrieval
    st.header("Stock Data")
    data = yf.download(selected_tickers, period='2y')['Adj Close']

    st.subheader("Historical Stock Prices")
    fig = go.Figure()
    for ticker in selected_tickers:
        fig.add_trace(go.Scatter(x=data.index, y=data[ticker], mode='lines', name=ticker))
    st.plotly_chart(fig)

    # Portfolio Optimization
    st.header("Portfolio Optimization")
    mean_returns = expected_returns.mean_historical_return(data)
    cov_matrix = risk_models.sample_cov(data)

    ef = EfficientFrontier(mean_returns, cov_matrix)
    weights = ef.max_sharpe()
    cleaned_weights = ef.clean_weights()
    ef.portfolio_performance(verbose=True)

    st.subheader("Optimized Portfolio Weights")
    st.write(cleaned_weights)

    st.subheader("Expected Annual Return, Annual Volatility, and Sharpe Ratio")
    exp_return, annual_volatility, sharpe_ratio = ef.portfolio_performance()
    st.write(f"Expected Annual Return: {exp_return:.2%}")
    st.write(f"Annual Volatility: {annual_volatility:.2%}")
    st.write(f"Sharpe Ratio: {sharpe_ratio:.2f}")

    # Efficient Frontier
    st.subheader("Efficient Frontier")
    ef_fig = ef.plot_efficient_frontier(show_assets=True)
    st.plotly_chart(ef_fig)

# Summary
st.header("Summary")
st.write("""
The app helps users determine the amount available for investment based on their salary and selected savings percentage. Users can select preferred stocks from the Nifty 500 list, retrieve and analyze historical stock data, optimize their investment portfolio for maximum returns and minimal risk, and visualize historical price trends for informed decision-making.
""")